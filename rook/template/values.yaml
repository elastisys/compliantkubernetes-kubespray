# Values shared with all clusters
commons:
  podSecurityPolicies:
    # Requires Gatekeeper PodSecurityPolicies templates from apps!
    # Enable after apps is installed!
    enabled: false

  networkPolicies:
    enabled: true

    dnsPeers:
      - cidr: 10.233.0.3/32

  cluster:
    # see rook/helmfile.d/values/cluster-presets
    preset: ""
    # the preset primarily includes resources requests and limits
    # these can however be overridden for each component below

    cephVersion:
      # allowUnsupported: false
      # imagePullPolicy: IfNotPresent
      image: quay.io/ceph/ceph:v17.2.6

    cephBlockPool:
      name: rook-ceph-blockpool

      ## host failure domain (default)
      # failureDomain: host
      ## zone failure domain
      # failureDomain: zone
      # subFailureDomain: host

      # replicated:
      #   requireSafeReplicaSize: true
      #   size: 2

    storageClass:
      name: rook-ceph-block
      # default: true

      ## If the storage nodes use kernel 5.4 or newer, set imageFeatures to
      ## "layering,fast-diff,object-map,deep-flatten,exclusive-lock"
      # parameters:
      #  imageFeatures: layering

      # allowVolumeExpansion: true
      # volumeBindingMode: Immediate
      # reclaimPolicy: Delete

    # storage:
    #   useAllDevices: true
    #   useAllNodes: true
    #
    #   ## for dev setup on block pvcs
    #   # storageClassDeviceSets:
    #   #   - name: set-me
    #   #     ...
    #   #     volumeClaimTemplates: []

    all: {}
      ## placement rules example
      # nodeAffinity:
      #   requiredDuringSchedulingIgnoredDuringExecution:
      #     nodeSelectorTerms:
      #       - matchExpressions:
      #         - key: elastisys.io/node-type
      #           operator: In
      #           values:
      #             - rook-ceph
      # tolerations:
      #   - key: elastisys.io/node-type
      #     operator: Equal
      #     value: rook-ceph
      #     effect: NoSchedule
      ## these can be overridden for mgr, mon, osd below

    # crashCollector:
    #   enabled: true
    #   resources: {}

    # logCollector:
    #   enabled: false
    #   resources: {}

    # dashboard:
    #   enabled: false

    # toolbox:
    #   enabled: true
    #
    #   resources: {}
    #   nodeAffinity: {}
    #   tolerations: []

    # mgr:
    #   count: 1
    #   resources: {}
    #   nodeAffinity: {}
    #   tolerations: []

    # mon:
    #   count: 3
    #   resources: {}
    #   nodeAffinity: {}
    #   tolerations: []
    #
    #   ## for dev setup on block pvcs
    #   # volumeClaimTemplate: {}

    # osd:
    #   resources: {}
    #   nodeAffinity: {}
    #   tolerations: []

  operator:
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi

    nodeSelector: {}

    tolerations: &ctltol
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule

  provisioner:
    csi-attacher:
      resources: &csires
        requests:
          cpu: 10m
          memory: 16Mi
        limits:
          cpu: 100m
          memory: 128Mi
    csi-provisioner:
      resources: *csires
    csi-resizer:
      resources: *csires
    csi-snapshotter:
      resources: *csires

    csi-rbdplugin:
      resources: &pluginres
        requests:
          cpu: 10m
          memory: 64Mi
        limits:
          cpu: 200m
          memory: 256Mi

    liveness-prometheus:
      resources: *csires

    tolerations: *ctltol

  plugin:
    driver-registrar:
      resources: *csires
    csi-rbdplugin:
      resources: *pluginres
    liveness-prometheus:
      resources: *csires

    tolerations: []

# Values specific to each cluster
clusters:
  service:
    monitoring:
      installGrafanaDashboards: true
      # Requires Prometheus operator from apps!
      # Enable after apps is installed!
      installPrometheusRules: false
      installServiceMonitors: false

    networkPolicies:
      apiserverPeers: []
      nodePeers: []

  workload:
    monitoring:
      # Requires Prometheus operator from apps!
      # Enable after apps is installed!
      installServiceMonitors: false
    networkPolicies:
      apiserverPeers: []
      nodePeers: []
